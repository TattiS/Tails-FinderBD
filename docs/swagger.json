{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tails-FinderBD",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "A RESTful API for managing animal adverts. Supports user registration, authentication, managing adverts, filters, and enum options.\n"
  },
  "servers": [
    {
      "url": "https://tails-finderbd.onrender.com/api",
      "description": "Production server"
    },
    {
      "url": "http://127.0.0.1:3000/api",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "AnimalAds",
      "description": "Operations about animal adverts"
    },
    {
      "name": "Users",
      "description": "Operations about Users."
    },
    {
      "name": "Filters",
      "description": "Operations about Filters."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Enums",
      "description": "Retrieve enum options for adverts."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "createUser",
        "description": "Registers a new user account and returns access token with user data",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "maxLength": 16,
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "maxLength": 128,
                    "example": "john123@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 128,
                    "example": "examplepwd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user and returned access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Authenticate an existing user and return access token with user data",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "maxLength": 128,
                    "example": "john123@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 128,
                    "example": "examplepwd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated the user and returned an access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the authenticated user by deleting the session.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out. No content is returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session",
        "operationId": "refreshSession",
        "description": "Refreshes the user's session by issuing a new access token and updating session cookies.\n\n⚠️ **Swagger UI does not store cookies. Please use Postman or your frontend to test this route properly.**\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed the session and returned a new access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Returns the currently authenticated user's information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/contacts": {
      "get": {
        "summary": "Get contacts of a user by ID",
        "description": "Returns phone and messenger contacts of another user. Authorization required.",
        "tags": [
          "Contacts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the user whose contacts are requested",
            "schema": {
              "type": "string",
              "example": "64f0a2c9e1b3f9a123456789"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved user contacts"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "phone": {
                          "type": "string",
                          "example": "+380991234567"
                        },
                        "messengers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "telegram",
                            "viber"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "patch": {
        "operationId": "updateUserService",
        "summary": "Update current authenticated user",
        "tags": [
          "Users"
        ],
        "description": "Updates the authenticated user's data. Only the fields provided in the request body will be updated. Requires authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "Jane Doe",
                    "description": "User's name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "jane.doe@example.com",
                    "description": "User's email"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+380931234567",
                    "description": "User's phone number"
                  },
                  "messengers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "telegram",
                      "viber"
                    ],
                    "description": "List of messenger apps"
                  },
                  "notificationsAllowed": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the user allows notifications"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid user data"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adverts": {
      "get": {
        "operationId": "getAdvertsService",
        "summary": "Retrieve all animal ads with filters, pagination and sorting",
        "tags": [
          "AnimalAds"
        ],
        "description": "Returns a paginated array of animal ads. Supports filtering by archived status, advert status, species, colors, city, and district. Results can also be sorted by specific fields. If no ads are found, a 404 error is returned.",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 20
            },
            "description": "Number of results per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort results by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order (ascending or descending)"
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by archived status (true/false)"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "found",
                "lost"
              ]
            },
            "description": "Filter by advert status (found/lost)"
          },
          {
            "in": "query",
            "name": "species",
            "schema": {
              "type": "string",
              "example": "dog"
            },
            "description": "Filter by animal species"
          },
          {
            "in": "query",
            "name": "colors",
            "schema": {
              "type": "string",
              "example": "black,white"
            },
            "description": "Filter by animal colors. Multiple colors can be passed, separated by commas."
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "example": "Київ"
            },
            "description": "Filter by city"
          },
          {
            "in": "query",
            "name": "district",
            "schema": {
              "type": "string",
              "example": "Оболонський"
            },
            "description": "Filter by district"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of animal ads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/advert"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 120,
                          "description": "Total number of adverts matching filters"
                        },
                        "page": {
                          "type": "integer",
                          "example": 1,
                          "description": "Current page number"
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 20,
                          "description": "Number of results per page"
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 6,
                          "description": "Total number of pages"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No animal ads found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No animal ads found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAdvertService",
        "summary": "Create a new animal advert",
        "tags": [
          "AnimalAds"
        ],
        "description": "Creates a new animal advert for a found or lost animal. Requires authentication. Photos are uploaded as files. After creation, the advert is linked to the user and possible matches may trigger notifications to other users.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "photos",
                  "status",
                  "animal",
                  "context"
                ],
                "properties": {
                  "photos": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "One or more photos of the animal"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "blackFur",
                      "whiteEar"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "found",
                      "lost"
                    ],
                    "example": "lost"
                  },
                  "animal": {
                    "type": "object",
                    "required": [
                      "species",
                      "colors"
                    ],
                    "properties": {
                      "species": {
                        "type": "string",
                        "example": "dog"
                      },
                      "breed": {
                        "type": "string",
                        "example": "labrador"
                      },
                      "colors": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "black"
                        }
                      },
                      "sex": {
                        "type": "string",
                        "enum": [
                          "самець",
                          "самка",
                          "інше"
                        ],
                        "example": "самка"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "малий",
                          "середній",
                          "великий",
                          "інше"
                        ],
                        "example": "середній"
                      },
                      "features": {
                        "type": "string",
                        "example": "Має червону хустку"
                      }
                    }
                  },
                  "context": {
                    "type": "object",
                    "required": [
                      "location",
                      "date"
                    ],
                    "properties": {
                      "location": {
                        "type": "object",
                        "required": [
                          "type",
                          "coordinates",
                          "city"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "Point"
                            ],
                            "example": "Point"
                          },
                          "coordinates": {
                            "type": "array",
                            "description": "[longitude, latitude]",
                            "items": {
                              "type": "number"
                            },
                            "example": [
                              30.5234,
                              50.4501
                            ]
                          },
                          "city": {
                            "type": "string",
                            "example": "Київ"
                          },
                          "district": {
                            "type": "string",
                            "example": "Оболонський"
                          },
                          "address": {
                            "type": "string",
                            "example": "вул. Грушевського, 1"
                          }
                        }
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-06-01T12:00:00.000Z"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 1000,
                        "example": "Собака загубився біля парку. Дуже дружній."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Advert successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Advert successfully created!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/advert"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid advert data"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adverts/start": {
      "get": {
        "operationId": "getLatestAdvertsService",
        "summary": "Retrieve latest 6 animal ads",
        "tags": [
          "AnimalAds"
        ],
        "description": "Returns the latest 6 animal ads sorted by creation date (descending). Each ad contains information about found or missing animals. If no ads are found, a 404 error is returned.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the latest 6 animal ads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found latest animal ads!"
                    },
                    "data": {
                      "type": "array",
                      "maxItems": 6,
                      "items": {
                        "$ref": "#/components/schemas/advert"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No animal ads found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No animal ads found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/adverts/{id}": {
      "get": {
        "operationId": "getAdvertByIdService",
        "summary": "Retrieve an animal ad by ID",
        "tags": [
          "AnimalAds"
        ],
        "description": "Returns a single animal ad by its ID. If the ID is invalid, a 400 error is returned. If the advert does not exist, a 404 error is returned.",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "665d14a36a70b4794fbcab12"
            },
            "description": "The ID of the advert to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the advert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "$ref": "#/components/schemas/advert"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid advert ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid advert ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Advert not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Advert not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateAdvertService",
        "summary": "Update an existing animal advert",
        "tags": [
          "AnimalAds"
        ],
        "description": "Updates an existing animal advert by its ID. Only the provided fields will be updated. Supports updating photos (multipart/form-data). Requires authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "665d14a36a70b4794fbcab12"
            },
            "description": "The ID of the advert to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photos": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "One or more new photos of the animal"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "blackFur",
                      "whiteEar"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "found",
                      "lost"
                    ],
                    "example": "found"
                  },
                  "animal": {
                    "type": "object",
                    "properties": {
                      "species": {
                        "type": "string",
                        "example": "cat"
                      },
                      "breed": {
                        "type": "string",
                        "example": "siamese"
                      },
                      "colors": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "white"
                        }
                      },
                      "sex": {
                        "type": "string",
                        "enum": [
                          "самець",
                          "самка",
                          "інше"
                        ],
                        "example": "самець"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "малий",
                          "середній",
                          "великий",
                          "інше"
                        ],
                        "example": "малий"
                      },
                      "features": {
                        "type": "string",
                        "example": "Має зелену нашийну стрічку"
                      }
                    }
                  },
                  "context": {
                    "type": "object",
                    "properties": {
                      "location": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "Point"
                            ],
                            "example": "Point"
                          },
                          "coordinates": {
                            "type": "array",
                            "description": "[longitude, latitude]",
                            "items": {
                              "type": "number"
                            },
                            "example": [
                              30.5234,
                              50.4501
                            ]
                          },
                          "city": {
                            "type": "string",
                            "example": "Київ"
                          },
                          "district": {
                            "type": "string",
                            "example": "Шевченківський"
                          },
                          "address": {
                            "type": "string",
                            "example": "вул. Хрещатик, 12"
                          }
                        }
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-01T12:00:00.000Z"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 1000,
                        "example": "Кота бачили біля магазину."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Advert successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Advert successfully updated!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/advert"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid advert ID format or bad request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid advert ID format"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Advert not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Advert not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/filters": {
      "get": {
        "operationId": "getFilterOptionsService",
        "summary": "Retrieve available filter options for adverts",
        "tags": [
          "Filters"
        ],
        "description": "Returns available filter options for animal adverts. Includes lists of unique cities, districts, animal species, and advert statuses. Only non-archived adverts are considered.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved filter options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cities": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "Київ",
                            "Львів",
                            "Одеса"
                          ],
                          "description": "List of unique cities"
                        },
                        "districts": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "Оболонський",
                            "Шевченківський"
                          ],
                          "description": "List of unique districts"
                        },
                        "species": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "dog",
                            "cat",
                            "rabbit"
                          ],
                          "description": "List of unique animal species"
                        },
                        "status": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "found",
                            "lost"
                          ],
                          "description": "List of unique advert statuses"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enums": {
      "get": {
        "operationId": "getEnumOptionsService",
        "summary": "Retrieve enum options for animal adverts",
        "tags": [
          "Enums"
        ],
        "description": "Returns available enum options for animal adverts, including species, colors, sex, size, and advert status.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved enum options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "species": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "dog",
                        "cat",
                        "rabbit"
                      ],
                      "description": "List of available animal species"
                    },
                    "colors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "black",
                        "white",
                        "brown"
                      ],
                      "description": "List of available colors"
                    },
                    "sex": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "самець",
                        "самка",
                        "інше"
                      ],
                      "description": "List of possible sex values"
                    },
                    "size": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "малий",
                        "середній",
                        "великий",
                        "інше"
                      ],
                      "description": "List of possible sizes"
                    },
                    "status": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "found",
                        "lost"
                      ],
                      "description": "List of possible advert statuses"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "User's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "john123@gmail.com"
          },
          "phone": {
            "description": "User's phone number",
            "type": "string",
            "example": "+380931234567"
          },
          "messengers": {
            "description": "List of messengers where user can be contacted",
            "type": "array",
            "items": {
              "type": "string",
              "example": "telegram"
            },
            "example": [
              "telegram",
              "viber"
            ]
          },
          "ads": {
            "description": "List of user's adverts (ObjectIds)",
            "type": "array",
            "items": {
              "type": "string",
              "example": "665d14a36a70b4794fbcab12"
            }
          },
          "favAds": {
            "description": "List of user's favourite adverts (ObjectIds)",
            "type": "array",
            "items": {
              "type": "string",
              "example": "665d14a36a70b4794fbcab12"
            }
          },
          "notificationsAllowed": {
            "description": "Whether the user allows notifications",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "termsAccepted": {
            "description": "Whether the user accepted the terms of service",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "termsAcceptedAt": {
            "description": "Date when the user accepted the terms",
            "type": "string",
            "format": "date-time",
            "example": "2025-09-03T12:00:00.000Z"
          },
          "termsVersion": {
            "description": "Version of the terms accepted by the user",
            "type": "string",
            "example": "1.0",
            "default": "1.0"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User's created date",
            "example": "2025-03-27T19:43:21.686+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "User's updated date",
            "example": "2025-03-27T19:43:21.686+00:00"
          }
        }
      },
      "advert": {
        "type": "object",
        "required": [
          "_id",
          "photos",
          "status",
          "animal",
          "context",
          "user"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "665d14a36a70b4794fbcab12"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://example.com/uploads/dog1.jpg"
            },
            "description": "Масив URL фотографій (галерея)"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "friendly"
            },
            "description": "Додаткові мітки"
          },
          "status": {
            "type": "string",
            "enum": [
              "found",
              "lost"
            ],
            "example": "lost",
            "description": "Статус оголошення (знайдено / загублено)"
          },
          "animal": {
            "type": "object",
            "required": [
              "species",
              "colors"
            ],
            "properties": {
              "species": {
                "type": "string",
                "example": "dog"
              },
              "breed": {
                "type": "string",
                "example": "labrador"
              },
              "colors": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "black"
                }
              },
              "sex": {
                "type": "string",
                "enum": [
                  "самець",
                  "самка",
                  "інше"
                ],
                "example": "самка"
              },
              "size": {
                "type": "string",
                "enum": [
                  "малий",
                  "середній",
                  "великий",
                  "інше"
                ],
                "example": "середній"
              },
              "features": {
                "type": "string",
                "example": "Має червону нашийну хустку"
              }
            }
          },
          "context": {
            "type": "object",
            "required": [
              "location",
              "date"
            ],
            "properties": {
              "location": {
                "type": "object",
                "required": [
                  "type",
                  "coordinates",
                  "city"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ],
                    "example": "Point"
                  },
                  "coordinates": {
                    "type": "array",
                    "description": "[longitude, latitude]",
                    "items": {
                      "type": "number"
                    },
                    "example": [
                      30.5234,
                      50.4501
                    ]
                  },
                  "city": {
                    "type": "string",
                    "example": "Київ"
                  },
                  "district": {
                    "type": "string",
                    "example": "Оболонський"
                  },
                  "address": {
                    "type": "string",
                    "example": "вул. Грушевського, 1"
                  }
                }
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-06-01T12:00:00.000Z"
              },
              "description": {
                "type": "string",
                "maxLength": 1000,
                "example": "Собака загубився біля парку. Дуже дружній."
              }
            }
          },
          "user": {
            "type": "string",
            "example": "665d14a36a70b4794fbcab34",
            "description": "ID користувача, який створив оголошення"
          },
          "archived": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:30:00.000Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request due to validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "ID should be an ObjectId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": [
                          "\"email\" must be a valid email"
                        ]
                      }
                    }
                  ]
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "ID should be an ObjectId"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": [
                              "\"email\" must be a valid email"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - missing or invalid credentials, expired token, or session-related issue",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Access token expired"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "The requested contact or route was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}
